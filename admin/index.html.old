<!DOCTYPE html>
<html lang="ms">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>TV JAM SOLAT - Admin Panel</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            padding: 20px;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            background: white;
            border-radius: 15px;
            box-shadow: 0 20px 40px rgba(0,0,0,0.1);
            overflow: hidden;
        }

        .header {
            background: linear-gradient(135deg, #8B0000, #DC143C);
            color: white;
            padding: 30px;
            text-align: center;
        }

        .header h1 {
            font-size: 2.5rem;
            margin-bottom: 10px;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
        }

        .header p {
            font-size: 1.1rem;
            opacity: 0.9;
        }

        .content {
            padding: 30px;
        }

        .tabs {
            display: flex;
            border-bottom: 2px solid #eee;
            margin-bottom: 30px;
        }

        .tab {
            padding: 15px 25px;
            cursor: pointer;
            border: none;
            background: none;
            font-size: 1rem;
            font-weight: 600;
            color: #666;
            border-bottom: 3px solid transparent;
            transition: all 0.3s ease;
        }

        .tab.active {
            color: #8B0000;
            border-bottom-color: #8B0000;
        }

        .tab:hover {
            background: #f5f5f5;
        }

        .tab-content {
            display: none;
        }

        .tab-content.active {
            display: block;
        }

        .form-group {
            margin-bottom: 25px;
        }

        .form-group label {
            display: block;
            margin-bottom: 8px;
            font-weight: 600;
            color: #333;
        }

        .form-group input,
        .form-group textarea,
        .form-group select {
            width: 100%;
            padding: 12px;
            border: 2px solid #ddd;
            border-radius: 8px;
            font-size: 1rem;
            transition: border-color 0.3s ease;
        }

        .form-group input:focus,
        .form-group textarea:focus,
        .form-group select:focus {
            outline: none;
            border-color: #8B0000;
        }

        .form-group textarea {
            resize: vertical;
            min-height: 100px;
        }

        .btn {
            padding: 12px 25px;
            border: none;
            border-radius: 8px;
            font-size: 1rem;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            margin-right: 10px;
            margin-bottom: 10px;
        }

        .btn-primary {
            background: linear-gradient(135deg, #8B0000, #DC143C);
            color: white;
        }

        .btn-primary:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(139,0,0,0.3);
        }

        .btn-secondary {
            background: #6c757d;
            color: white;
        }

        .btn-danger {
            background: #dc3545;
            color: white;
        }

        .btn-success {
            background: #28a745;
            color: white;
        }

        .file-upload {
            border: 2px dashed #ddd;
            border-radius: 8px;
            padding: 30px;
            text-align: center;
            transition: all 0.3s ease;
            cursor: pointer;
        }

        .file-upload:hover {
            border-color: #8B0000;
            background: #f8f9fa;
        }

        .file-upload.dragover {
            border-color: #8B0000;
            background: #fff5f5;
        }

        .image-preview {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
            gap: 20px;
            margin-top: 20px;
        }

        .image-item {
            position: relative;
            border: 2px solid #ddd;
            border-radius: 8px;
            overflow: hidden;
            aspect-ratio: 16/9;
        }

        .image-item img {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }

        .image-item .overlay {
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(0,0,0,0.7);
            display: flex;
            align-items: center;
            justify-content: center;
            opacity: 0;
            transition: opacity 0.3s ease;
        }

        .image-item:hover .overlay {
            opacity: 1;
        }

        .status-message {
            padding: 15px;
            border-radius: 8px;
            margin-bottom: 20px;
            font-weight: 600;
        }

        .status-success {
            background: #d4edda;
            color: #155724;
            border: 1px solid #c3e6cb;
        }

        .status-error {
            background: #f8d7da;
            color: #721c24;
            border: 1px solid #f5c6cb;
        }

        .preview-section {
            background: #f8f9fa;
            border: 1px solid #ddd;
            border-radius: 8px;
            padding: 20px;
            margin-top: 20px;
        }

        .preview-section h3 {
            margin-bottom: 15px;
            color: #333;
        }

        .current-settings {
            background: #e9ecef;
            padding: 15px;
            border-radius: 8px;
            margin-bottom: 15px;
        }

        .settings-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 20px;
        }

        .announcement-item {
            background: #f8f9fa;
            border: 1px solid #ddd;
            border-radius: 8px;
            padding: 15px;
            margin-bottom: 10px;
            position: relative;
        }

        .announcement-item .delete-btn {
            position: absolute;
            top: 10px;
            right: 10px;
            background: #dc3545;
            color: white;
            border: none;
            border-radius: 50%;
            width: 25px;
            height: 25px;
            cursor: pointer;
            font-size: 12px;
        }

        .color-preview {
            width: 30px;
            height: 30px;
            border-radius: 4px;
            border: 1px solid #ddd;
            display: inline-block;
            margin-left: 10px;
            vertical-align: middle;
        }

        @media (max-width: 768px) {
            .container {
                margin: 10px;
                border-radius: 10px;
            }

            .content {
                padding: 20px;
            }

            .tabs {
                flex-wrap: wrap;
            }

            .tab {
                padding: 10px 15px;
                font-size: 0.9rem;
            }

            .settings-grid {
                grid-template-columns: 1fr;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>🕌 TV JAM SOLAT</h1>
            <p>Panel Pengurusan Paparan Masjid</p>
        </div>

        <div class="content">
            <div id="statusMessage"></div>

            <div class="tabs">
                <button class="tab active" onclick="showTab('header')">Header Settings</button>
                <button class="tab" onclick="showTab('background')">Background</button>
                <button class="tab" onclick="showTab('slideshow')">Slideshow Images</button>
                <button class="tab" onclick="showTab('announcements')">Announcements</button>
                <button class="tab" onclick="showTab('preview')">Preview</button>
            </div>

            <!-- Header Settings Tab -->
            <div id="header" class="tab-content active">
                <h2>Header Configuration</h2>
                <div class="settings-grid">
                    <div>
                        <div class="form-group">
                            <label for="channelName">Channel Name:</label>
                            <input type="text" id="channelName" value="TV JAM SOLAT">
                        </div>
                        <div class="form-group">
                            <label for="addressLine1">Address Line 1:</label>
                            <input type="text" id="addressLine1" value="No 9, 1411, Kompleks Perniagaan Utama Alor 31">
                        </div>
                        <div class="form-group">
                            <label for="addressLine2">Address Line 2:</label>
                            <input type="text" id="addressLine2" value="01254111355 TV.SOLAT.COM">
                        </div>
                    </div>
                    <div>
                        <div class="form-group">
                            <label for="headerBgColor">Header Background Color:</label>
                            <input type="color" id="headerBgColor" value="#8B0000">
                            <span class="color-preview" id="headerColorPreview"></span>
                        </div>
                        <div class="form-group">
                            <label for="headerTextColor">Header Text Color:</label>
                            <input type="color" id="headerTextColor" value="#FFD700">
                            <span class="color-preview" id="headerTextColorPreview"></span>
                        </div>
                        <div class="form-group">
                            <label for="logoText">Logo Text:</label>
                            <input type="text" id="logoText" value="TV" maxlength="3">
                        </div>
                    </div>
                </div>
                <button class="btn btn-primary" onclick="saveHeaderSettings()">Save Header Settings</button>
            </div>

            <!-- Background Tab -->
            <div id="background" class="tab-content">
                <h2>Background Settings</h2>
                <div class="form-group">
                    <label>Background Type:</label>
                    <select id="backgroundType" onchange="toggleBackgroundOptions()">
                        <option value="mosque">Default Mosque</option>
                        <option value="image">Custom Image</option>
                        <option value="color">Solid Color</option>
                        <option value="gradient">Gradient</option>
                    </select>
                </div>

                <div id="imageUploadSection" style="display: none;">
                    <div class="form-group">
                        <label>Upload Background Image:</label>
                        <div class="file-upload" onclick="document.getElementById('backgroundImageInput').click()">
                            <p>📁 Click to select background image or drag and drop</p>
                            <input type="file" id="backgroundImageInput" accept="image/*" style="display: none;" onchange="handleBackgroundImageUpload(event)">
                        </div>
                        <div id="backgroundImagePreview"></div>
                    </div>
                </div>

                <div id="colorSection" style="display: none;">
                    <div class="form-group">
                        <label for="bgColor">Background Color:</label>
                        <input type="color" id="bgColor" value="#4682B4">
                        <span class="color-preview" id="bgColorPreview"></span>
                    </div>
                </div>

                <div id="gradientSection" style="display: none;">
                    <div class="settings-grid">
                        <div class="form-group">
                            <label for="gradientColor1">Gradient Color 1:</label>
                            <input type="color" id="gradientColor1" value="#87CEEB">
                            <span class="color-preview" id="gradient1Preview"></span>
                        </div>
                        <div class="form-group">
                            <label for="gradientColor2">Gradient Color 2:</label>
                            <input type="color" id="gradientColor2" value="#4682B4">
                            <span class="color-preview" id="gradient2Preview"></span>
                        </div>
                    </div>
                </div>

                <button class="btn btn-primary" onclick="saveBackgroundSettings()">Save Background Settings</button>
            </div>

            <!-- Slideshow Images Tab -->
            <div id="slideshow" class="tab-content">
                <h2>Slideshow Images Management</h2>
                <div class="form-group">
                    <label>Upload Slideshow Images:</label>
                    <div class="file-upload" onclick="document.getElementById('slideshowInput').click()">
                        <p>🖼️ Click to select images or drag and drop</p>
                        <p>Multiple images can be selected</p>
                        <input type="file" id="slideshowInput" accept="image/*" multiple style="display: none;" onchange="handleSlideshowUpload(event)">
                    </div>
                </div>

                <div class="form-group">
                    <label for="slideDuration">Slide Duration (seconds):</label>
                    <input type="number" id="slideDuration" value="5" min="1" max="60">
                </div>

                <div class="form-group">
                    <label>
                        <input type="checkbox" id="enableSlideshow"> Enable Slideshow
                    </label>
                </div>

                <h3>Current Slideshow Images:</h3>
                <div id="slideshowPreview" class="image-preview">
                    <!-- Slideshow images will be displayed here -->
                </div>

                <button class="btn btn-primary" onclick="saveSlideshowSettings()">Save Slideshow Settings</button>
            </div>

            <!-- Announcements Tab -->
            <div id="announcements" class="tab-content">
                <h2>Scrolling Text Management</h2>
                <div class="form-group">
                    <label for="newAnnouncement">Add New Announcement:</label>
                    <textarea id="newAnnouncement" placeholder="Enter your announcement text here..."></textarea>
                </div>
                <button class="btn btn-success" onclick="addAnnouncement()">Add Announcement</button>

                <div class="form-group">
                    <label for="scrollSpeed">Scroll Speed (seconds for full cycle):</label>
                    <input type="number" id="scrollSpeed" value="15" min="5" max="60">
                </div>

                <h3>Current Announcements:</h3>
                <div id="announcementsList">
                    <!-- Current announcements will be displayed here -->
                </div>

                <button class="btn btn-primary" onclick="saveAnnouncements()">Save Announcements</button>
            </div>

            <!-- Preview Tab -->
            <div id="preview" class="tab-content">
                <h2>Live Preview</h2>
                <div class="preview-section">
                    <h3>Current Settings Summary:</h3>
                    <div id="settingsSummary" class="current-settings">
                        Loading current settings...
                    </div>
                    <button class="btn btn-secondary" onclick="refreshPreview()">Refresh Preview</button>
                    <button class="btn btn-primary" onclick="openMainDisplay()">Open Main Display</button>
                </div>
            </div>
        </div>
    </div>

    <script>
        // Global variables
        let currentSettings = {
            header: {},
            background: {},
            slideshow: [],
            announcements: []
        };

        // Tab management
        function showTab(tabName) {
            // Hide all tab contents
            document.querySelectorAll('.tab-content').forEach(content => {
                content.classList.remove('active');
            });
            
            // Remove active class from all tabs
            document.querySelectorAll('.tab').forEach(tab => {
                tab.classList.remove('active');
            });
            
            // Show selected tab content
            document.getElementById(tabName).classList.add('active');
            
            // Add active class to clicked tab
            event.target.classList.add('active');

            // Load data for specific tabs
            if (tabName === 'announcements') {
                loadAnnouncements();
            } else if (tabName === 'preview') {
                loadPreview();
            }
        }

        // Status message management
        function showStatus(message, type = 'success') {
            const statusDiv = document.getElementById('statusMessage');
            statusDiv.className = `status-message status-${type}`;
            statusDiv.textContent = message;
            statusDiv.style.display = 'block';
            
            setTimeout(() => {
                statusDiv.style.display = 'none';
            }, 5000);
        }

        // Header Settings
        function saveHeaderSettings() {
            const headerSettings = {
                channelName: document.getElementById('channelName').value,
                addressLine1: document.getElementById('addressLine1').value,
                addressLine2: document.getElementById('addressLine2').value,
                headerBgColor: document.getElementById('headerBgColor').value,
                headerTextColor: document.getElementById('headerTextColor').value,
                logoText: document.getElementById('logoText').value
            };

            // Save to server
            fetch('/api/settings/header', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(headerSettings)
            })
            .then(response => response.ok ? response.json() : Promise.reject('Failed to save'))
            .then(data => {
                showStatus('Header settings saved successfully!');
                currentSettings.header = headerSettings;
            })
            .catch(error => {
                showStatus('Error saving header settings: ' + error, 'error');
            });
        }

        // Background Settings
        function toggleBackgroundOptions() {
            const type = document.getElementById('backgroundType').value;
            
            document.getElementById('imageUploadSection').style.display = 'none';
            document.getElementById('colorSection').style.display = 'none';
            document.getElementById('gradientSection').style.display = 'none';
            
            if (type === 'image') {
                document.getElementById('imageUploadSection').style.display = 'block';
            } else if (type === 'color') {
                document.getElementById('colorSection').style.display = 'block';
            } else if (type === 'gradient') {
                document.getElementById('gradientSection').style.display = 'block';
            }
        }

        function handleBackgroundImageUpload(event) {
            const file = event.target.files[0];
            if (file) {
                const reader = new FileReader();
                reader.onload = function(e) {
                    const preview = document.getElementById('backgroundImagePreview');
                    preview.innerHTML = `
                        <div class="image-item" style="max-width: 300px; margin-top: 10px;">
                            <img src="${e.target.result}" alt="Background Preview">
                        </div>
                    `;
                };
                reader.readAsDataURL(file);
            }
        }

        function saveBackgroundSettings() {
            const backgroundSettings = {
                type: document.getElementById('backgroundType').value,
                color: document.getElementById('bgColor').value,
                gradientColor1: document.getElementById('gradientColor1').value,
                gradientColor2: document.getElementById('gradientColor2').value,
                // Note: For file upload, you'd need to implement actual file handling
            };

            fetch('/api/settings/background', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(backgroundSettings)
            })
            .then(response => response.ok ? response.json() : Promise.reject('Failed to save'))
            .then(data => {
                showStatus('Background settings saved successfully!');
                currentSettings.background = backgroundSettings;
            })
            .catch(error => {
                showStatus('Error saving background settings: ' + error, 'error');
            });
        }

        // Slideshow Management
        function handleSlideshowUpload(event) {
            const files = event.target.files;
            const preview = document.getElementById('slideshowPreview');
            
            for (let file of files) {
                if (file.type.startsWith('image/')) {
                    const reader = new FileReader();
                    reader.onload = function(e) {
                        const imageItem = document.createElement('div');
                        imageItem.className = 'image-item';
                        imageItem.innerHTML = `
                            <img src="${e.target.result}" alt="Slideshow Image">
                            <div class="overlay">
                                <button class="btn btn-danger" onclick="removeSlideImage(this)">Delete</button>
                            </div>
                        `;
                        preview.appendChild(imageItem);
                    };
                    reader.readAsDataURL(file);
                }
            }
        }

        function removeSlideImage(button) {
            button.closest('.image-item').remove();
        }

        function saveSlideshowSettings() {
            const slideshowSettings = {
                enabled: document.getElementById('enableSlideshow').checked,
                duration: parseInt(document.getElementById('slideDuration').value),
                images: [] // In a real implementation, you'd handle actual image uploads
            };

            fetch('/api/settings/slideshow', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(slideshowSettings)
            })
            .then(response => response.ok ? response.json() : Promise.reject('Failed to save'))
            .then(data => {
                showStatus('Slideshow settings saved successfully!');
                currentSettings.slideshow = slideshowSettings;
            })
            .catch(error => {
                showStatus('Error saving slideshow settings: ' + error, 'error');
            });
        }

        // Announcements Management
        function addAnnouncement() {
            const text = document.getElementById('newAnnouncement').value.trim();
            if (text) {
                const listDiv = document.getElementById('announcementsList');
                const announcementDiv = document.createElement('div');
                announcementDiv.className = 'announcement-item';
                announcementDiv.innerHTML = `
                    <button class="delete-btn" onclick="removeAnnouncement(this)">×</button>
                    <p>${text}</p>
                `;
                listDiv.appendChild(announcementDiv);
                document.getElementById('newAnnouncement').value = '';
            }
        }

        function removeAnnouncement(button) {
            button.closest('.announcement-item').remove();
        }

        function loadAnnouncements() {
            fetch('/api/announcements')
            .then(response => response.json())
            .then(data => {
                const listDiv = document.getElementById('announcementsList');
                listDiv.innerHTML = '';
                
                if (data.announcements) {
                    data.announcements.forEach(announcement => {
                        const announcementDiv = document.createElement('div');
                        announcementDiv.className = 'announcement-item';
                        announcementDiv.innerHTML = `
                            <button class="delete-btn" onclick="removeAnnouncement(this)">×</button>
                            <p>${announcement}</p>
                        `;
                        listDiv.appendChild(announcementDiv);
                    });
                }
            })
            .catch(error => {
                console.error('Error loading announcements:', error);
            });
        }

        function saveAnnouncements() {
            const announcements = [];
            document.querySelectorAll('#announcementsList .announcement-item p').forEach(p => {
                announcements.push(p.textContent);
            });

            const scrollSpeed = parseInt(document.getElementById('scrollSpeed').value);

            fetch('/api/announcements', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ announcements, scrollSpeed })
            })
            .then(response => response.ok ? response.json() : Promise.reject('Failed to save'))
            .then(data => {
                showStatus('Announcements saved successfully!');
            })
            .catch(error => {
                showStatus('Error saving announcements: ' + error, 'error');
            });
        }

        // Preview Management
        function loadPreview() {
            const summary = document.getElementById('settingsSummary');
            summary.innerHTML = `
                <h4>Header Settings:</h4>
                <p>Channel: ${document.getElementById('channelName').value}</p>
                <p>Logo: ${document.getElementById('logoText').value}</p>
                
                <h4>Background:</h4>
                <p>Type: ${document.getElementById('backgroundType').value}</p>
                
                <h4>Slideshow:</h4>
                <p>Enabled: ${document.getElementById('enableSlideshow').checked ? 'Yes' : 'No'}</p>
                <p>Duration: ${document.getElementById('slideDuration').value} seconds</p>
                
                <h4>Announcements:</h4>
                <p>Count: ${document.querySelectorAll('#announcementsList .announcement-item').length}</p>
                <p>Scroll Speed: ${document.getElementById('scrollSpeed').value} seconds</p>
            `;
        }

        function refreshPreview() {
            loadPreview();
            showStatus('Preview refreshed!');
        }

        function openMainDisplay() {
            window.open('/', '_blank');
        }

        // Color preview updates
        function updateColorPreviews() {
            const colorInputs = [
                { input: 'headerBgColor', preview: 'headerColorPreview' },
                { input: 'headerTextColor', preview: 'headerTextColorPreview' },
                { input: 'bgColor', preview: 'bgColorPreview' },
                { input: 'gradientColor1', preview: 'gradient1Preview' },
                { input: 'gradientColor2', preview: 'gradient2Preview' }
            ];

            colorInputs.forEach(({ input, preview }) => {
                const inputEl = document.getElementById(input);
                const previewEl = document.getElementById(preview);
                if (inputEl && previewEl) {
                    previewEl.style.backgroundColor = inputEl.value;
                    inputEl.addEventListener('input', (e) => {
                        previewEl.style.backgroundColor = e.target.value;
                    });
                }
            });
        }

        // Initialize the admin panel
        function initializeAdmin() {
            updateColorPreviews();
            loadAnnouncements();
            console.log('Admin panel initialized');
        }

        // Start the application when page loads
        document.addEventListener('DOMContentLoaded', initializeAdmin);
    </script>
</body>
</html>
